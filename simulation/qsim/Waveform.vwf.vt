// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/23/2023 17:42:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    clk
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module clk_vlg_sample_tst(
	pin_name1,
	sampler_tx
);
input  pin_name1;
output sampler_tx;

reg sample;
time current_time;
always @(pin_name1)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module clk_vlg_check_tst (
	a,
	a0,
	a1,
	b,
	b0,
	b1,
	c,
	c0,
	c7,
	d,
	d0,
	d1,
	e,
	e0,
	e1,
	f,
	f0,
	f1,
	g,
	g0,
	g1,
	sampler_rx
);
input  a;
input  a0;
input  a1;
input  b;
input  b0;
input  b1;
input  c;
input  c0;
input  c7;
input  d;
input  d0;
input  d1;
input  e;
input  e0;
input  e1;
input  f;
input  f0;
input  f1;
input  g;
input  g0;
input  g1;
input sampler_rx;

reg  a_expected;
reg  a0_expected;
reg  a1_expected;
reg  b_expected;
reg  b0_expected;
reg  b1_expected;
reg  c_expected;
reg  c0_expected;
reg  c7_expected;
reg  d_expected;
reg  d0_expected;
reg  d1_expected;
reg  e_expected;
reg  e0_expected;
reg  e1_expected;
reg  f_expected;
reg  f0_expected;
reg  f1_expected;
reg  g_expected;
reg  g0_expected;
reg  g1_expected;

reg  a_prev;
reg  a0_prev;
reg  a1_prev;
reg  b_prev;
reg  b0_prev;
reg  b1_prev;
reg  c_prev;
reg  c0_prev;
reg  c7_prev;
reg  d_prev;
reg  d0_prev;
reg  d1_prev;
reg  e_prev;
reg  e0_prev;
reg  e1_prev;
reg  f_prev;
reg  f0_prev;
reg  f1_prev;
reg  g_prev;
reg  g0_prev;
reg  g1_prev;

reg  a_expected_prev;
reg  a0_expected_prev;
reg  a1_expected_prev;
reg  b_expected_prev;
reg  b0_expected_prev;
reg  b1_expected_prev;
reg  c_expected_prev;
reg  c0_expected_prev;
reg  c7_expected_prev;
reg  d_expected_prev;
reg  d0_expected_prev;
reg  d1_expected_prev;
reg  e_expected_prev;
reg  e0_expected_prev;
reg  e1_expected_prev;
reg  f_expected_prev;
reg  f0_expected_prev;
reg  f1_expected_prev;
reg  g_expected_prev;
reg  g0_expected_prev;
reg  g1_expected_prev;

reg  last_a_exp;
reg  last_a0_exp;
reg  last_a1_exp;
reg  last_b_exp;
reg  last_b0_exp;
reg  last_b1_exp;
reg  last_c_exp;
reg  last_c0_exp;
reg  last_c7_exp;
reg  last_d_exp;
reg  last_d0_exp;
reg  last_d1_exp;
reg  last_e_exp;
reg  last_e0_exp;
reg  last_e1_exp;
reg  last_f_exp;
reg  last_f0_exp;
reg  last_f1_exp;
reg  last_g_exp;
reg  last_g0_exp;
reg  last_g1_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:21] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 21'b1;
end

// update real /o prevs

always @(trigger)
begin
	a_prev = a;
	a0_prev = a0;
	a1_prev = a1;
	b_prev = b;
	b0_prev = b0;
	b1_prev = b1;
	c_prev = c;
	c0_prev = c0;
	c7_prev = c7;
	d_prev = d;
	d0_prev = d0;
	d1_prev = d1;
	e_prev = e;
	e0_prev = e0;
	e1_prev = e1;
	f_prev = f;
	f0_prev = f0;
	f1_prev = f1;
	g_prev = g;
	g0_prev = g0;
	g1_prev = g1;
end

// update expected /o prevs

always @(trigger)
begin
	a_expected_prev = a_expected;
	a0_expected_prev = a0_expected;
	a1_expected_prev = a1_expected;
	b_expected_prev = b_expected;
	b0_expected_prev = b0_expected;
	b1_expected_prev = b1_expected;
	c_expected_prev = c_expected;
	c0_expected_prev = c0_expected;
	c7_expected_prev = c7_expected;
	d_expected_prev = d_expected;
	d0_expected_prev = d0_expected;
	d1_expected_prev = d1_expected;
	e_expected_prev = e_expected;
	e0_expected_prev = e0_expected;
	e1_expected_prev = e1_expected;
	f_expected_prev = f_expected;
	f0_expected_prev = f0_expected;
	f1_expected_prev = f1_expected;
	g_expected_prev = g_expected;
	g0_expected_prev = g0_expected;
	g1_expected_prev = g1_expected;
end



// expected g0
initial
begin
	g0_expected = 1'bX;
end 

// expected f0
initial
begin
	f0_expected = 1'bX;
end 

// expected e0
initial
begin
	e0_expected = 1'bX;
end 

// expected d0
initial
begin
	d0_expected = 1'bX;
end 

// expected c0
initial
begin
	c0_expected = 1'bX;
end 

// expected b0
initial
begin
	b0_expected = 1'bX;
end 

// expected a0
initial
begin
	a0_expected = 1'bX;
end 

// expected g1
initial
begin
	g1_expected = 1'bX;
end 

// expected f1
initial
begin
	f1_expected = 1'bX;
end 

// expected e1
initial
begin
	e1_expected = 1'bX;
end 

// expected d1
initial
begin
	d1_expected = 1'bX;
end 

// expected c7
initial
begin
	c7_expected = 1'bX;
end 

// expected b1
initial
begin
	b1_expected = 1'bX;
end 

// expected a1
initial
begin
	a1_expected = 1'bX;
end 

// expected g
initial
begin
	g_expected = 1'bX;
end 

// expected f
initial
begin
	f_expected = 1'bX;
end 

// expected e
initial
begin
	e_expected = 1'bX;
end 

// expected d
initial
begin
	d_expected = 1'bX;
end 

// expected c
initial
begin
	c_expected = 1'bX;
end 

// expected b
initial
begin
	b_expected = 1'bX;
end 

// expected a
initial
begin
	a_expected = 1'bX;
end 
// generate trigger
always @(a_expected or a or a0_expected or a0 or a1_expected or a1 or b_expected or b or b0_expected or b0 or b1_expected or b1 or c_expected or c or c0_expected or c0 or c7_expected or c7 or d_expected or d or d0_expected or d0 or d1_expected or d1 or e_expected or e or e0_expected or e0 or e1_expected or e1 or f_expected or f or f0_expected or f0 or f1_expected or f1 or g_expected or g or g0_expected or g0 or g1_expected or g1)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected a = %b | expected a0 = %b | expected a1 = %b | expected b = %b | expected b0 = %b | expected b1 = %b | expected c = %b | expected c0 = %b | expected c7 = %b | expected d = %b | expected d0 = %b | expected d1 = %b | expected e = %b | expected e0 = %b | expected e1 = %b | expected f = %b | expected f0 = %b | expected f1 = %b | expected g = %b | expected g0 = %b | expected g1 = %b | ",a_expected_prev,a0_expected_prev,a1_expected_prev,b_expected_prev,b0_expected_prev,b1_expected_prev,c_expected_prev,c0_expected_prev,c7_expected_prev,d_expected_prev,d0_expected_prev,d1_expected_prev,e_expected_prev,e0_expected_prev,e1_expected_prev,f_expected_prev,f0_expected_prev,f1_expected_prev,g_expected_prev,g0_expected_prev,g1_expected_prev);
	$display("| real a = %b | real a0 = %b | real a1 = %b | real b = %b | real b0 = %b | real b1 = %b | real c = %b | real c0 = %b | real c7 = %b | real d = %b | real d0 = %b | real d1 = %b | real e = %b | real e0 = %b | real e1 = %b | real f = %b | real f0 = %b | real f1 = %b | real g = %b | real g0 = %b | real g1 = %b | ",a_prev,a0_prev,a1_prev,b_prev,b0_prev,b1_prev,c_prev,c0_prev,c7_prev,d_prev,d0_prev,d1_prev,e_prev,e0_prev,e1_prev,f_prev,f0_prev,f1_prev,g_prev,g0_prev,g1_prev);
`endif
	if (
		( a_expected_prev !== 1'bx ) && ( a_prev !== a_expected_prev )
		&& ((a_expected_prev !== last_a_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a_expected_prev);
		$display ("     Real value = %b", a_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_a_exp = a_expected_prev;
	end
	if (
		( a0_expected_prev !== 1'bx ) && ( a0_prev !== a0_expected_prev )
		&& ((a0_expected_prev !== last_a0_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a0_expected_prev);
		$display ("     Real value = %b", a0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_a0_exp = a0_expected_prev;
	end
	if (
		( a1_expected_prev !== 1'bx ) && ( a1_prev !== a1_expected_prev )
		&& ((a1_expected_prev !== last_a1_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port a1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", a1_expected_prev);
		$display ("     Real value = %b", a1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_a1_exp = a1_expected_prev;
	end
	if (
		( b_expected_prev !== 1'bx ) && ( b_prev !== b_expected_prev )
		&& ((b_expected_prev !== last_b_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b_expected_prev);
		$display ("     Real value = %b", b_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_b_exp = b_expected_prev;
	end
	if (
		( b0_expected_prev !== 1'bx ) && ( b0_prev !== b0_expected_prev )
		&& ((b0_expected_prev !== last_b0_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b0_expected_prev);
		$display ("     Real value = %b", b0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_b0_exp = b0_expected_prev;
	end
	if (
		( b1_expected_prev !== 1'bx ) && ( b1_prev !== b1_expected_prev )
		&& ((b1_expected_prev !== last_b1_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port b1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", b1_expected_prev);
		$display ("     Real value = %b", b1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_b1_exp = b1_expected_prev;
	end
	if (
		( c_expected_prev !== 1'bx ) && ( c_prev !== c_expected_prev )
		&& ((c_expected_prev !== last_c_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c_expected_prev);
		$display ("     Real value = %b", c_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_c_exp = c_expected_prev;
	end
	if (
		( c0_expected_prev !== 1'bx ) && ( c0_prev !== c0_expected_prev )
		&& ((c0_expected_prev !== last_c0_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c0_expected_prev);
		$display ("     Real value = %b", c0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_c0_exp = c0_expected_prev;
	end
	if (
		( c7_expected_prev !== 1'bx ) && ( c7_prev !== c7_expected_prev )
		&& ((c7_expected_prev !== last_c7_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port c7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", c7_expected_prev);
		$display ("     Real value = %b", c7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_c7_exp = c7_expected_prev;
	end
	if (
		( d_expected_prev !== 1'bx ) && ( d_prev !== d_expected_prev )
		&& ((d_expected_prev !== last_d_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d_expected_prev);
		$display ("     Real value = %b", d_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_d_exp = d_expected_prev;
	end
	if (
		( d0_expected_prev !== 1'bx ) && ( d0_prev !== d0_expected_prev )
		&& ((d0_expected_prev !== last_d0_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d0_expected_prev);
		$display ("     Real value = %b", d0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_d0_exp = d0_expected_prev;
	end
	if (
		( d1_expected_prev !== 1'bx ) && ( d1_prev !== d1_expected_prev )
		&& ((d1_expected_prev !== last_d1_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port d1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", d1_expected_prev);
		$display ("     Real value = %b", d1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_d1_exp = d1_expected_prev;
	end
	if (
		( e_expected_prev !== 1'bx ) && ( e_prev !== e_expected_prev )
		&& ((e_expected_prev !== last_e_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e_expected_prev);
		$display ("     Real value = %b", e_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_e_exp = e_expected_prev;
	end
	if (
		( e0_expected_prev !== 1'bx ) && ( e0_prev !== e0_expected_prev )
		&& ((e0_expected_prev !== last_e0_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e0_expected_prev);
		$display ("     Real value = %b", e0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_e0_exp = e0_expected_prev;
	end
	if (
		( e1_expected_prev !== 1'bx ) && ( e1_prev !== e1_expected_prev )
		&& ((e1_expected_prev !== last_e1_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port e1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", e1_expected_prev);
		$display ("     Real value = %b", e1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_e1_exp = e1_expected_prev;
	end
	if (
		( f_expected_prev !== 1'bx ) && ( f_prev !== f_expected_prev )
		&& ((f_expected_prev !== last_f_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f_expected_prev);
		$display ("     Real value = %b", f_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_f_exp = f_expected_prev;
	end
	if (
		( f0_expected_prev !== 1'bx ) && ( f0_prev !== f0_expected_prev )
		&& ((f0_expected_prev !== last_f0_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f0_expected_prev);
		$display ("     Real value = %b", f0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_f0_exp = f0_expected_prev;
	end
	if (
		( f1_expected_prev !== 1'bx ) && ( f1_prev !== f1_expected_prev )
		&& ((f1_expected_prev !== last_f1_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port f1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", f1_expected_prev);
		$display ("     Real value = %b", f1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_f1_exp = f1_expected_prev;
	end
	if (
		( g_expected_prev !== 1'bx ) && ( g_prev !== g_expected_prev )
		&& ((g_expected_prev !== last_g_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g_expected_prev);
		$display ("     Real value = %b", g_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_g_exp = g_expected_prev;
	end
	if (
		( g0_expected_prev !== 1'bx ) && ( g0_prev !== g0_expected_prev )
		&& ((g0_expected_prev !== last_g0_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g0_expected_prev);
		$display ("     Real value = %b", g0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_g0_exp = g0_expected_prev;
	end
	if (
		( g1_expected_prev !== 1'bx ) && ( g1_prev !== g1_expected_prev )
		&& ((g1_expected_prev !== last_g1_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port g1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", g1_expected_prev);
		$display ("     Real value = %b", g1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_g1_exp = g1_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module clk_vlg_vec_tst();
// constants                                           
// general purpose registers
reg pin_name1;
// wires                                               
wire a;
wire a0;
wire a1;
wire b;
wire b0;
wire b1;
wire c;
wire c0;
wire c7;
wire d;
wire d0;
wire d1;
wire e;
wire e0;
wire e1;
wire f;
wire f0;
wire f1;
wire g;
wire g0;
wire g1;

wire sampler;                             

// assign statements (if any)                          
clk i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.a0(a0),
	.a1(a1),
	.b(b),
	.b0(b0),
	.b1(b1),
	.c(c),
	.c0(c0),
	.c7(c7),
	.d(d),
	.d0(d0),
	.d1(d1),
	.e(e),
	.e0(e0),
	.e1(e1),
	.f(f),
	.f0(f0),
	.f1(f1),
	.g(g),
	.g0(g0),
	.g1(g1),
	.pin_name1(pin_name1)
);

// pin_name1
always
begin
	pin_name1 = 1'b0;
	pin_name1 = #5000 1'b1;
	#5000;
end 

clk_vlg_sample_tst tb_sample (
	.pin_name1(pin_name1),
	.sampler_tx(sampler)
);

clk_vlg_check_tst tb_out(
	.a(a),
	.a0(a0),
	.a1(a1),
	.b(b),
	.b0(b0),
	.b1(b1),
	.c(c),
	.c0(c0),
	.c7(c7),
	.d(d),
	.d0(d0),
	.d1(d1),
	.e(e),
	.e0(e0),
	.e1(e1),
	.f(f),
	.f0(f0),
	.f1(f1),
	.g(g),
	.g0(g0),
	.g1(g1),
	.sampler_rx(sampler)
);
endmodule

